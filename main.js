(()=>{"use strict";var e={740:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(537),s=n.n(r),o=n(645),i=n.n(o)()(s());i.push([e.id,":root {\n    box-sizing: border-box;\n    font-size: 62.5%;\n    --main-color: #ffffff;\n    --secondary-bg-color: #F5F5F5;\n    --hero-text-color: #444444;\n    --secondary-text-color: #D0D0D0;\n}\n\nbody {\n    color: var(--hero-text-color);\n    background-color: var(--bg-color);\n    font-size: 1.6rem;\n    font-family: 'Poppins', sans-serif;\n}\n\nimg {\n    width: 100%;\n}\n\n#wrapper {\n    display: grid;\n    grid-template-columns: 1fr 2fr auto;\n    padding: 1.5rem;\n    gap: 2rem;\n}\n\n#main {\n    order: 1;\n}\n\n#block {\n    order: 2;\n}\n\n.complementary-column {\n    background-color: var(--secondary-bg-color);\n    height: calc(100vh - 5rem);\n    border-radius: 2rem;\n    padding: 0 2rem;\n}\n\n.input {\n    all: unset;\n    background-color: var(--secondary-bg-color);\n    border: 1px solid #8472721f;\n    border-radius: 1rem;\n    min-width: 25rem;\n    padding: 1rem;\n}\n\ntextarea {\n    height: 10rem !important;\n}\n\n.select {\n    background-color: var(--secondary-bg-color);\n    border: 1px solid #8472721f;\n    border-radius: 1rem;\n    padding: .8rem;\n}\n\n.date {\n    background-color: var(--secondary-bg-color);\n    border: 1px solid #8472721f;\n    border-radius: 1rem;\n    padding: .8rem;\n}\n\n\n.column-title {\n    font-size: 2rem;\n    font-weight: 600;\n}\n\n.br-gray {\n    border-top: 1px solid #8472721f;\n    border-bottom: 1px solid #8472721f;\n}\n\n\n.list-title {\n    text-transform: uppercase;\n}\n\n.project-element {\n    padding: 0 1rem;\n}\n\n.selected {\n    font-weight: 600;\n    background-color: #EBEBEB;\n    border-radius: 1rem;\n}\n\n.selected .number-tasks {\n    background-color: #FAFAFA\n}\n\n.adjust-element {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.group-items {\n    display: flex;\n    gap: 1.5rem;\n}\n\n.icon {\n    width: 20px;\n}\n\n.completed {\n    text-decoration: line-through;\n}\n\n.number-tasks {\n    padding: .5rem 1.6rem;\n    border-radius: .6rem;\n    background-color: #EBEBEB\n}\n\n.number-task {\n    font-weight: 600;\n    font-size: 1.2rem;\n    margin: 0px;\n}\n\n/* Main */\n\n.header {\n    font-weight: 600;\n    font-size: 3.8rem;\n    margin-bottom: 2rem;\n}\n\n.header p {\n    margin: 0;\n}\n\n.pad-item {\n    padding: 0 2rem;\n}\n\n.br-all {\n    border: 1px solid #8472721f !important;\n    border-radius: 1rem !important;\n}\n\n.task {\n    border-top: 0;\n}\n\n/* Edit Block */\n\n.information {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.input-group {\n    display: grid;\n    font-size: 1.4rem;\n    justify-content: flex-start;\n    grid-template-columns: 70px 140px;\n}\n\n.g-4 {\n    gap: 4rem;\n}\n\n.relative {\n    position: relative;\n}\n\n/* Btns */\n\n.btn-group {\n    display: flex;\n    gap: 1.5rem;\n    justify-content: space-between;\n    position: absolute;\n    bottom: 2rem;\n}\n\n.btn {\n    all: unset;\n    padding: 1rem 1rem;\n    font-weight: 600;\n}\n\n.btnRight {\n    background-color: #FFD33C;\n}\n\n.complete {\n    background-color: #3584FFAD;\n}\n\n.remove {\n    background-color: #FF3C61C7;\n}","",{version:3,sources:["webpack://./src/css/styles.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,gBAAgB;IAChB,qBAAqB;IACrB,6BAA6B;IAC7B,0BAA0B;IAC1B,+BAA+B;AACnC;;AAEA;IACI,6BAA6B;IAC7B,iCAAiC;IACjC,iBAAiB;IACjB,kCAAkC;AACtC;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,mCAAmC;IACnC,eAAe;IACf,SAAS;AACb;;AAEA;IACI,QAAQ;AACZ;;AAEA;IACI,QAAQ;AACZ;;AAEA;IACI,2CAA2C;IAC3C,0BAA0B;IAC1B,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,2CAA2C;IAC3C,2BAA2B;IAC3B,mBAAmB;IACnB,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,2CAA2C;IAC3C,2BAA2B;IAC3B,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,2CAA2C;IAC3C,2BAA2B;IAC3B,mBAAmB;IACnB,cAAc;AAClB;;;AAGA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,+BAA+B;IAC/B,kCAAkC;AACtC;;;AAGA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,yBAAyB;IACzB,mBAAmB;AACvB;;AAEA;IACI;AACJ;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,qBAAqB;IACrB,oBAAoB;IACpB;AACJ;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,WAAW;AACf;;AAEA,SAAS;;AAET;IACI,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sCAAsC;IACtC,8BAA8B;AAClC;;AAEA;IACI,aAAa;AACjB;;AAEA,eAAe;;AAEf;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,2BAA2B;IAC3B,iCAAiC;AACrC;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,kBAAkB;AACtB;;AAEA,SAAS;;AAET;IACI,aAAa;IACb,WAAW;IACX,8BAA8B;IAC9B,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,2BAA2B;AAC/B",sourcesContent:[":root {\n    box-sizing: border-box;\n    font-size: 62.5%;\n    --main-color: #ffffff;\n    --secondary-bg-color: #F5F5F5;\n    --hero-text-color: #444444;\n    --secondary-text-color: #D0D0D0;\n}\n\nbody {\n    color: var(--hero-text-color);\n    background-color: var(--bg-color);\n    font-size: 1.6rem;\n    font-family: 'Poppins', sans-serif;\n}\n\nimg {\n    width: 100%;\n}\n\n#wrapper {\n    display: grid;\n    grid-template-columns: 1fr 2fr auto;\n    padding: 1.5rem;\n    gap: 2rem;\n}\n\n#main {\n    order: 1;\n}\n\n#block {\n    order: 2;\n}\n\n.complementary-column {\n    background-color: var(--secondary-bg-color);\n    height: calc(100vh - 5rem);\n    border-radius: 2rem;\n    padding: 0 2rem;\n}\n\n.input {\n    all: unset;\n    background-color: var(--secondary-bg-color);\n    border: 1px solid #8472721f;\n    border-radius: 1rem;\n    min-width: 25rem;\n    padding: 1rem;\n}\n\ntextarea {\n    height: 10rem !important;\n}\n\n.select {\n    background-color: var(--secondary-bg-color);\n    border: 1px solid #8472721f;\n    border-radius: 1rem;\n    padding: .8rem;\n}\n\n.date {\n    background-color: var(--secondary-bg-color);\n    border: 1px solid #8472721f;\n    border-radius: 1rem;\n    padding: .8rem;\n}\n\n\n.column-title {\n    font-size: 2rem;\n    font-weight: 600;\n}\n\n.br-gray {\n    border-top: 1px solid #8472721f;\n    border-bottom: 1px solid #8472721f;\n}\n\n\n.list-title {\n    text-transform: uppercase;\n}\n\n.project-element {\n    padding: 0 1rem;\n}\n\n.selected {\n    font-weight: 600;\n    background-color: #EBEBEB;\n    border-radius: 1rem;\n}\n\n.selected .number-tasks {\n    background-color: #FAFAFA\n}\n\n.adjust-element {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.group-items {\n    display: flex;\n    gap: 1.5rem;\n}\n\n.icon {\n    width: 20px;\n}\n\n.completed {\n    text-decoration: line-through;\n}\n\n.number-tasks {\n    padding: .5rem 1.6rem;\n    border-radius: .6rem;\n    background-color: #EBEBEB\n}\n\n.number-task {\n    font-weight: 600;\n    font-size: 1.2rem;\n    margin: 0px;\n}\n\n/* Main */\n\n.header {\n    font-weight: 600;\n    font-size: 3.8rem;\n    margin-bottom: 2rem;\n}\n\n.header p {\n    margin: 0;\n}\n\n.pad-item {\n    padding: 0 2rem;\n}\n\n.br-all {\n    border: 1px solid #8472721f !important;\n    border-radius: 1rem !important;\n}\n\n.task {\n    border-top: 0;\n}\n\n/* Edit Block */\n\n.information {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.input-group {\n    display: grid;\n    font-size: 1.4rem;\n    justify-content: flex-start;\n    grid-template-columns: 70px 140px;\n}\n\n.g-4 {\n    gap: 4rem;\n}\n\n.relative {\n    position: relative;\n}\n\n/* Btns */\n\n.btn-group {\n    display: flex;\n    gap: 1.5rem;\n    justify-content: space-between;\n    position: absolute;\n    bottom: 2rem;\n}\n\n.btn {\n    all: unset;\n    padding: 1rem 1rem;\n    font-weight: 600;\n}\n\n.btnRight {\n    background-color: #FFD33C;\n}\n\n.complete {\n    background-color: #3584FFAD;\n}\n\n.remove {\n    background-color: #FF3C61C7;\n}"],sourceRoot:""}]);const a=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,s,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(i[d]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(s," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],a=0;a<e.length;a++){var d=e[a],c=r.base?d[0]+r.base:d[0],l=o[c]||0,p="".concat(c," ").concat(l);o[c]=l+1;var u=n(p),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var m=s(A,r);r.byIndex=a,t.splice(a,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var o=r(e=e||[],s=s||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var a=n(o[i]);t[a].references--}for(var d=r(e,s),c=0;c<o.length;c++){var l=n(o[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=d}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,s&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),s=n.n(r),o=n(569),i=n.n(o),a=n(565),d=n.n(a),c=n(216),l=n.n(c),p=n(589),u=n.n(p),A=n(740),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=l(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const b=()=>{let e=0;return()=>(e+=1,e)},g={ProjectList:(()=>{const e=[];return{getProjectList:()=>e,toString:()=>e.map((e=>`Id : ${e.getId()} , Title : ${e.getTitle()} , Description : ${e.getDescription()}`))}})(),addProjectToList:(e,t)=>{e.push(t)},removeProjectFromList:(e,t)=>{const n=e.findIndex((e=>e.getId()===t));return-1!==n&&e.splice(n,1),"Removed"},updateProjectInList:(e,t,n,r)=>{const s=e.find((e=>e.getId()===t));return s?(s.setTitle(n),s.setDescription(r),"Updated"):"Project not found"}},v=(e,t)=>{const n=e.getTaskList().filter((e=>e.getId()!==t));return e.setTaskList(n),void 0!==n?`Task with id : ${t} was removed from the Task List`:"Id not found"},f=(e,t)=>e.find((e=>e.getId()===t)),C=v,B=function(){const e={};return{subscribe:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},unsubscribe:function(t,n){e[t]&&(e[t]=e[t].filter((e=>e!==n)))},publish:function(t,...n){const r=e[t];r&&r.forEach((e=>{e(...n)}))}}}(),I=e=>{B.subscribe("newListCreated",e)},k=(e,t,n,r,s)=>{const o=((e,t,n,r)=>{let s=0,o=!1;const i=()=>s,a=()=>e,d=()=>t,c=()=>n,l=()=>r,p=()=>o;return{getId:i,setId:e=>s=e,getTitle:a,setTitle:t=>e=t,getDescription:d,setDescription:e=>t=e,getDueDate:c,setDueDate:e=>n=e,getPriority:l,setPriority:e=>r=e,setInCheckList:e=>o=e,getInCheckList:p,toString:()=>`ID : ${i()} \n        Title : ${a()} \n        Description : ${d()} \n        Duedate : ${c()}\n        Priority : ${l()}\n        In checklist? : ${p()}\n        `}})(t,n,r,s);return B.publish("newTaskCreated",e,o),{newTask:o}},h=()=>{I((e=>{B.subscribe("taskCompleteRequest",((t,n)=>{const r=f(e,t);r&&(((e,t)=>{const n=e.getTaskList().find((e=>e.getId()===t));e.getTaskListCompleted().push(n),n.setInCheckList(!0),v(e,t)})(r,n),B.publish("listUpdated",e))}))}))},y=(e,t)=>{const n=((e,t)=>{let n=0,r=[],s=[];return{getId:()=>n,setId:e=>n=e,getTitle:()=>e,setTitle:t=>e=t,getDescription:()=>t,setDescription:e=>t=e,getTaskList:()=>r,setTaskList:e=>r=e,getTaskListCompleted:()=>s,setTaskListCompleted:e=>s=e}})(e,t);return B.publish("newProjectCreated",n),{newProject:n}},j=(e,t)=>{B.publish("taskCompleteRequest",e,t)},T="wrapper",E="sidebarProjects",x="main",P="taskGroup",w="taskGroupCompleted",L="closeBlock",$=n.p+"f5d02360c91a33d7128a.svg",D=n.p+"ea74f673d113306700ee.svg",F=n.p+"346e1e7906ba36275f5e.svg",S=n.p+"fc1891ae9967037a6329.svg",R=n.p+"7e621f384cdbbddcccab.svg",U=$,q=D,z=F,M=S,N=R,W=e=>`\n    <div class="project-element adjust-element" data-project="${e.getId()}">\n      <div class="group-items">\n        <img class="icon" src="${N}" alt="" srcset="">\n        <p>${e.getTitle()}</p>\n      </div>\n      <div class="number-tasks">\n        <p class="number-task">${e.getTaskList().length}</p>\n      </div>\n    </div>`,O=e=>`\n    <option value="${e.getId()}">${e.getTitle()}</option>`,Z=e=>`\n    <div class="task pad-item br-gray adjust-element">\n      <div class="group-items">\n        <input class="showBlock" type="checkbox" name="" id="openRemoveTaskForm" data-task="${e.getId()}">\n        <p>${e.getTitle()}</p>\n      </div>\n      <div class="icon showBlock" id="openUpdateTaskForm" data-task="${e.getId()}">\n        <img src="${U}" alt="">\n      </div>\n    </div>`,J=e=>`\n    <div class="task pad-item br-gray adjust-element">\n      <div class="group-items">\n        <input type="checkbox" checked>\n        <p class="completed">${e.getTitle()}</p>\n      </div>\n      <div class="icon" data-task="${e.getId()}">\n        <img src="${U}" alt="">\n      </div>\n    </div>`,G=(e,t)=>{document.getElementById(e).insertAdjacentHTML("beforeend",t)},H=e=>{const t=document.getElementById(e);t&&(t.innerHTML="")},Q=(e,t)=>e.map((e=>t(e))).join(" "),V=()=>{(e=>{const t=document.createElement("div");t.id=e,document.body.appendChild(t)})("wrapper"),G(T,`\n    <div class="sidebar complementary-column">\n        <p class="column-title">Menu</p>\n        <div class="list br-gray">\n          <p class="list-title">Lists</p>\n          <div class="projects" id="${E}">\n          </div>\n          <div class="group-items showBlock" id="openAddProjectForm">\n              <img class="icon" src="${M}" alt="" srcset="">\n              <p>Add New Project</p>\n          </div>\n        </div>\n    </div>`),G(T,`\n    <div id="${x}">\n    </div>`)},Y=e=>{H(x);const t=(e=>`\n    <div id="project">\n      <div class="header group-items">\n        <p>${e.getTitle()}</p>\n        <div class="group-items pad-item showBlock" id="openUpdateProjectForm">\n          <img class="icon" src="${q}" alt="" srcset="">\n        </div>\n        <div class="group-items pad-item showBlock" id="openRemoveProjectForm">\n          <img class="icon" src="${z}" alt="" srcset="">\n        </div>\n      </div>\n      <div class=" group-items pad-item">\n        <p>${e.getDescription()}</p>\n      </div>\n      <div class="br-all group-items pad-item showBlock" id="openAddTaskForm">\n        <img class="icon" src="${M}" alt="" srcset="">\n        <p>Add New Task</p>\n      </div>\n      <div id="${w}">\n        <p>Tasks Completed</p>\n      </div>\n      <div id="${P}">\n        <p>Tasks</p>\n      </div>\n    </div>`)(e);G(x,t),(e=>{const t=e.getTaskListCompleted(),n=Q(t,J);G(w,n)})(e),(e=>{const t=e.getTaskList(),n=Q(t,Z);G(P,n)})(e)},_=e=>{const t=O(e);G("listProjects",t)},X=()=>{G(T,`\n    <div class="complementary-column relative" id="block">\n      <form action="" class="form" id="addProjectBtn">\n          <p class="column-title">Project:</p>\n          <div class="information">\n            <input id="title" class="input" type="text" placeholder="Some cool title" required>\n            <textarea id="description" class="input" cols="30" rows="10" placeholder="Some cool description" required></textarea>\n          </div>\n          <div class="btn-group">\n            <button class="btn br-all btnLeft" id="${L}">Close</button>\n            <button class="btn br-all btnRight" type="submit">Add Project</button>\n          </div>\n      </form>\n    </div>`)},K=e=>{const t=(e=>`\n    <div class="complementary-column relative" id="block">\n      <form action="" class="form" id="updateProjectBtn">\n        <p class="column-title" id="idProject" data-project="${e.getId()}">Project:</p>\n        <div class="information">\n          <input class="input" type="text" id="title" value="${e.getTitle()}" required>\n          <textarea class="input" name="" id="description" cols="30" rows="10" required>${e.getDescription()}</textarea>\n          <div class="input-group adjust-element group-items g-4">\n            <p>Completed:</p>\n            <p>${e.getTaskListCompleted().length}</p>\n          </div>\n          <div class="input-group adjust-element group-items g-4">\n            <p>Tasks:</p>\n            <p>${e.getTaskList().length}</p>\n          </div>\n        </div>\n        <div class="btn-group">\n            <button class="btn br-all btnLeft" id="${L}">Close</button>\n            <button class="btn br-all btnRight" type="submit">Update Project</button>\n        </div>\n      </form>\n    </div>`)(e);G(T,t)},ee=e=>{const t=(e=>`\n    <div class="complementary-column relative" id="block">\n    <p class="column-title" id="idProject" data-project="${e.getId()}">Project:</p>\n    <div class="information">\n      <input class="input" type="text" id="title" value="${e.getTitle()}"disabled>\n      <textarea class="input" name="" id="description" cols="30" rows="10" value="" disabled>${e.getDescription()}</textarea>\n      <div class="input-group adjust-element group-items">\n        <p>Tasks</p>\n        <p>${e.getTaskList().length}</p>\n      </div>\n    </div>\n    <div class="btn-group">\n        <button class="btn br-all btnLeft" id="${L}">Close</button>\n        <button class="btn br-all btnRight remove" type="submit" id="removeProjectBtn">Remove Project</button>\n    </div>\n    </div>`)(e);G(T,t)},te=()=>{G(T,`\n    <div class="complementary-column relative" id="block">\n      <form action="" class="form" id="addTaskBtn">\n        <p class="column-title">Task:</p>\n        <div class="information">\n          <input class="input" type="text" id="title" placeholder="Some cool task" required>\n          <textarea class="input" name="" id="description" cols="30" rows="10" placeholder="Some cool description" required></textarea>\n          <div class="input-group adjust-element group-items">\n            <p>List</p>\n            <select class="select" name="select" id="listProjects">\n            </select>\n          </div>\n          <div class="input-group adjust-element group-items">\n            <p>Due date</p>\n            <input class="date" type="date" name="" id="dueDate" required>\n          </div>\n          <div class="input-group adjust-element group-items">\n            <p>Priority</p>\n            <select class="select" name="select" id="priority">\n              <option value="Normal">Normal</option>\n              <option value="Important">Important</option>\n            </select>\n          </div>\n        </div>\n        <div class="btn-group">\n            <button class="btn br-all btnLeft" id="${L}">Close</button>\n            <button class="btn br-all btnRight" type="submit">Add Task</button>\n        </div>\n      </form>\n    </div>`)},ne=e=>{const t=(e=>`\n    <div class="complementary-column relative" id="block">\n      <form action="" class="form" id="updateTaskBtn">\n        <p class="column-title" id="idTask" data-task="${e.getId()}">Task:</p>\n        <div class="information">\n          <input class="input" type="text" id="title" value="${e.getTitle()}" required>\n          <textarea class="input" name="" id="description" cols="30" rows="10" required>${e.getDescription()}</textarea>\n          <div class="input-group adjust-element group-items">\n              <p>List</p>\n              <select class="select" name="select" id="listProjects" disabled>\n              </select>\n          </div>\n          <div class="input-group adjust-element group-items">\n            <p>Due date</p>\n            <input class="date" type="date" name="" id="dueDate" value="${e.getDueDate()}" required>\n          </div>\n          <div class="input-group adjust-element group-items">\n            <p>Priority</p>\n            <select class="select" name="select" id="priority">\n              <option value="Normal">Normal</option>\n              <option value="Important">Important</option>\n            </select>\n          </div>\n        </div>\n        <div class="btn-group">\n            <button class="btn br-all btnLeft" id="${L}">Close</button>\n            <button class="btn br-all btnRight" type="submit">Update Task</button>\n        </div>\n      </form>\n    </div>`)(e);G(T,t)},re=e=>{e.classList.add("selected")},se=()=>{const e=document.getElementById("block");e&&e.remove()},oe=e=>{const t={title:document.getElementById("title").value,description:document.getElementById("description").value};if(e){const e=parseInt(document.getElementById("idProject").dataset.project);t.idProject=e}return t},ie=e=>{const t={idProject:parseInt(document.getElementById("listProjects").value),title:document.getElementById("title").value,description:document.getElementById("description").value,dueDate:document.getElementById("dueDate").value,priority:document.getElementById("priority").value};if(e){const e=parseInt(document.getElementById("idTask").dataset.task);t.idTask=e}return t},ae=(e,t)=>{if((e=>{H(E),(e=>{const t=Q(e,W);G(E,t)})(e)})(e),t){const e=document.querySelector(`[data-project="${t.dataset.project}"]`);if(e)return re(t=e),t}},de=se,ce=new Map;ce.set("closeBlock",de),ce.set("openAddProjectForm",(()=>{X()})),ce.set("openUpdateProjectForm",(()=>{B.publish("updateProject")})),ce.set("openRemoveProjectForm",(()=>{B.publish("removeProject")})),ce.set("openAddTaskForm",(()=>{te(),B.publish("taskAddFormRendered")})),ce.set("openUpdateTaskForm",(e=>{B.publish("updateTask",e)})),ce.set("openRemoveTaskForm",(e=>{B.publish("removeTask",e)})),ce.set("addProjectBtn",(()=>{const e=oe();y(e.title,e.description),se()})),ce.set("updateProjectBtn",(()=>{const e=oe("update");var t,n,r;t=e.idProject,n=e.title,r=e.description,B.publish("projectUpdateRequest",t,n,r),se()})),ce.set("removeProjectBtn",(()=>{const e=oe("remove");var t;t=e.idProject,B.publish("projectDeleteRequest",t),se()})),ce.set("addTaskBtn",(()=>{const e=ie();k(e.idProject,e.title,e.description,e.dueDate,e.priority),se()})),ce.set("updateTaskBtn",(()=>{const e=ie("update");((e,t,n,r,s,o)=>{const i={idProject:e,idTask:t,title:n,description:r,dueDate:s,priority:o};B.publish("taskUpdateRequest",i)})(e.idProject,e.idTask,e.title,e.description,e.dueDate,e.priority),se()})),ce.set("removeTaskBtn",(()=>{const e=ie("remove");var t,n;t=e.idProject,n=e.idTask,B.publish("taskDeleteRequest",t,n),se()})),ce.set("completedTaskBtn",(()=>{const e=ie("completed");j(e.idProject,e.idTask),se()}));const le=["openUpdateTaskForm","openRemoveTaskForm"],pe=()=>{document.querySelectorAll(".showBlock").forEach((e=>{e.addEventListener("click",(e=>{de();const t=ce.get(e.currentTarget.id);le.includes(e.currentTarget.id)?t(parseInt(e.currentTarget.dataset.task)):t(),B.publish("formOpened")}))}))},ue=()=>{const e=document.querySelectorAll(".form"),t=document.querySelectorAll(".btnLeft"),n=document.querySelectorAll(".btnRight");t.forEach((e=>{e.addEventListener("click",(e=>{const t=ce.get(e.currentTarget.id);t&&t()}))})),n.forEach((e=>{e.addEventListener("click",(e=>{const t=ce.get(e.currentTarget.id);t&&t()}))})),e.forEach((e=>{e.addEventListener("submit",(e=>{e.preventDefault();const t=ce.get(e.currentTarget.id);t&&t()}))}))},Ae=e=>{const t=document.querySelectorAll(".project-element"),n=t=>{const n=t.currentTarget;B.publish("projectIsSelected",n);const r=parseInt(t.currentTarget.dataset.project),s=e.find((e=>e.getId()===r));Y(s),B.publish("projectRendered",s)};t.forEach((e=>{e.addEventListener("click",n)}))},me=()=>{let e;B.subscribe("listUpdated",(t=>{e=ae(t,e)})),B.subscribe("projectIsSelected",(t=>{e=((e,t)=>(e&&e.classList.remove("selected"),re(e=t),e))(e,t)}))},be=()=>{let e;B.subscribe("listUpdated",(t=>{e=t})),B.subscribe("taskAddFormRendered",(()=>{(e=>{const t=Q(e,O);G("listProjects",t)})(e)}))},ge=()=>{let e;B.subscribe("projectRendered",(t=>{e=t})),B.subscribe("removeTask",(t=>{if(e){(e=>{const t=(e=>`\n    <div class="complementary-column relative" id="block">\n      <p class="column-title" id="idTask" data-task="${e.getId()}">Task:</p>\n      <div class="information">\n        <input class="input" type="text" id="title" value="${e.getTitle()}" disabled>\n        <textarea class="input" name="" id="description" cols="30" rows="10" value="" disabled>${e.getDescription()}</textarea>\n        <div class="input-group adjust-element group-items">\n            <p>List</p>\n            <select class="select" name="select" id="listProjects" disabled>\n            </select>\n        </div>\n        <div class="input-group adjust-element group-items">\n          <p>Due date</p>\n          <input class="date" type="date" name="" id="dueDate" value="${e.getDueDate()}" disabled>\n        </div>\n        <div class="input-group adjust-element group-items">\n          <p>Priority</p>\n          <select class="select" name="select" id="priority" disabled>\n            <option value="${e.getPriority()}">${e.getPriority()}</option>\n          </select>\n        </div>\n      </div>\n      <div class="btn-group">\n          <button class="btn br-all btnLeft remove" id="removeTaskBtn">Remove Task</button>\n          <button class="btn br-all btnRight complete"id="completedTaskBtn" type="submit">Task Completed</button>\n      </div>\n    </div>`)(e);G(T,t)})(e.getTaskList().find((e=>e.getId()===t))),_(e)}}))},ve=localStorage,fe=()=>{V(),pe(),me(),be(),(()=>{let e;B.subscribe("listUpdated",(()=>{e&&Y(e)})),B.subscribe("projectRendered",(t=>{e=t}))})(),(()=>{let e;B.subscribe("projectRendered",(t=>{e=t})),B.subscribe("updateProject",(()=>{e&&K(e)}))})(),(()=>{let e;B.subscribe("projectRendered",(t=>{e=t})),B.subscribe("removeProject",(()=>{e&&ee(e)}))})(),(()=>{let e;B.subscribe("projectRendered",(t=>{e=t})),B.subscribe("updateTask",(t=>{if(e){const n=e.getTaskList().find((e=>e.getId()===t));ne(n),_(e)}}))})(),ge(),B.subscribe("listUpdated",Ae),B.subscribe("listUpdated",pe),B.subscribe("projectRendered",pe),B.subscribe("formOpened",ue)},Ce=()=>{B.subscribe("listUpdated",(e=>{const t=e=>e.map((e=>({id:e.getId(),title:e.getTitle(),description:e.getDescription(),dueDate:e.getDueDate(),priority:e.getPriority(),inCheckList:e.getInCheckList()}))),n=e.map((e=>({id:e.getId(),title:e.getTitle(),description:e.getDescription(),taskList:t(e.getTaskList()),taskListCompleted:t(e.getTaskListCompleted())})));ve.setItem("list",JSON.stringify(n))})),(()=>{const e=JSON.parse(ve.getItem("list"));e&&e.forEach((e=>{y(e.title,e.description),[e.taskList,e.taskListCompleted].flat().sort(((e,t)=>e.id-t.id)).forEach((t=>{k(e.id,t.title,t.description,t.dueDate,t.priority),t.inCheckList&&j(e.id,t.id)}))}))})()};(()=>{I((e=>{B.subscribe("newProjectCreated",(t=>{g.addProjectToList(e,t),B.publish("projectAddedToList",e),B.publish("listUpdated",e)}))})),I((e=>{B.subscribe("projectDeleteRequest",(t=>{g.removeProjectFromList(e,t),B.publish("listUpdated",e)}))})),I((e=>{B.subscribe("projectUpdateRequest",((t,n,r)=>{g.updateProjectInList(e,t,n,r),B.publish("listUpdated",e)}))})),I((e=>{B.subscribe("newTaskCreated",((t,n)=>{const r=f(e,t);r&&(((e,t)=>{e.getTaskList().push(t)})(r,n),B.publish("listUpdated",e),B.publish("taskAddedToProject",r))}))})),I((e=>{B.subscribe("taskDeleteRequest",((t,n)=>{const r=f(e,t);C(r,n),B.publish("taskRemovedFromProject",r),B.publish("listUpdated",e)}))})),I((e=>{B.subscribe("taskUpdateRequest",(t=>{const n=f(e,t.idProject);((e,t)=>{const n=e.getTaskList().map((e=>(e.getId()===t.idTask&&(e.setTitle(t.title),e.setDescription(t.description),e.setDueDate(t.dueDate),e.setPriority(t.priority)),e)));e.setTaskList(n),void 0!==n&&t.idTask})(n,t),B.publish("taskUpdatedFromProject",n),B.publish("listUpdated",e)}))})),h(),(()=>{let e,t;B.subscribe("idProjectStart",(t=>{B.subscribe("newProjectCreated",(n=>{e=t(),n.setId(e)}))})),B.subscribe("idTaskStart",(e=>{B.subscribe("newTaskCreated",((n,r)=>{t=e(),r.setId(t)}))}))})(),(()=>{const e=b();B.publish("idProjectStart",e);const t=b();B.publish("idTaskStart",t)})(),(()=>{const e=g.ProjectList,t=e.getProjectList();B.publish("newListCreated",t)})()})(),fe(),Ce()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,